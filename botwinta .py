import os
import discord
from discord import app_commands # Import ‡πÄ‡∏û‡∏¥‡πà‡∏°
from discord.ext import commands
import json
import os
import random
from datetime import datetime, timedelta

from myserver import server_on

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)


# --- 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏• (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ---
DATA_FILE = "level_data.json"
COOLDOWN_SECONDS = 60
XP_PER_MESSAGE = (10, 20)
# *** ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ! ***
ANNOUNCEMENT_CHANNEL_ID = 123456789012345678 # << ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô Channel ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πÄ‡∏ß‡∏• ---
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

def calculate_xp_for_level(level: int):
    return 5 * (level ** 2) + (50 * level) + 100

async def check_level_up(user_id, guild):
    data = load_data()
    user_data = data[user_id]
    xp_needed = calculate_xp_for_level(user_data["level"])

    if user_data["xp"] >= xp_needed:
        user_data["level"] += 1
        current_level = user_data["level"]
        
        announcement_channel = guild.get_channel(1419642518898872371)
        member = guild.get_member(int(user_id))

        if announcement_channel and member:
            try:
                embed = discord.Embed(
                    title="üéâ LEVEL UP! üéâ",
                    description=f"‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö {member.mention} ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô **Level {current_level}**!",
                    color=discord.Color.gold()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                await announcement_channel.send(embed=embed)
            except discord.Forbidden:
                print(f"‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ID: {1414277732010823770}")
        
        save_data(data)

# --- 4. Event ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ---
@bot.event
async def on_ready():
    print(f'{bot.user} ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!')
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(f"Error syncing commands: {e}")

@bot.event
async def on_message(message):
    if message.author.bot or not message.guild:
        return

    data = load_data()
    user_id = str(message.author.id)
    now = datetime.utcnow()
    
    if user_id not in data:
        data[user_id] = {"xp": 0, "level": 1, "last_message_time": "2000-01-01T00:00:00.000000"}

    last_msg_time = datetime.fromisoformat(data[user_id]["last_message_time"])
    if now < last_msg_time + timedelta(seconds=COOLDOWN_SECONDS):
        return

    xp_to_add = random.randint(*XP_PER_MESSAGE)
    data[user_id]["xp"] += xp_to_add
    data[user_id]["last_message_time"] = now.isoformat()
    save_data(data)

    await check_level_up(user_id, message.guild)

# --- 5. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash Command ---
@bot.tree.command(name="myrank", description="‡∏î‡∏π‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÅ‡∏•‡∏∞ XP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")


async def rank(interaction: discord.Interaction, member: discord.Member = None):
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    await interaction.response.defer()
    target_member = member or interaction.user
    data = load_data()
    user_id = str(target_member.id)
    if user_id not in data:
        await interaction.followup.send(f"{target_member.display_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πÄ‡∏ß‡∏•!")
        return
    user_data = data[user_id]
    level = user_data["level"]
    xp = user_data["xp"]
    xp_for_current_level = calculate_xp_for_level(level - 1)
    xp_for_next_level = calculate_xp_for_level(level)
    current_level_xp = xp - xp_for_current_level
    xp_needed = xp_for_next_level - xp_for_current_level
    progress = int((current_level_xp / xp_needed) * 20)
    progress_bar = '‚ñà' * progress + '‚îÄ' * (20 - progress)
    embed = discord.Embed(color=target_member.color)
    embed.set_author(name=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏≠‡∏á {target_member.display_name}", icon_url=target_member.avatar.url)
    embed.add_field(name="Level", value=f"**{level}**", inline=True)
    embed.add_field(name="Total XP", value=f"**{xp}**", inline=True)
    embed.add_field(name="Progress", value=f"`{progress_bar}`\n`{current_level_xp} / {xp_needed} XP`", inline=False)
    await interaction.followup.send(embed=embed)


@bot.tree.command(name="myleaderboard", description="‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
async def leaderboard(interaction: discord.Interaction):
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    await interaction.response.defer()
    data = load_data()
    if not data:
        await interaction.followup.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢")
        return
    sorted_users = sorted(data.items(), key=lambda item: item[1]["xp"], reverse=True)
    embed = discord.Embed(title="üèÜ Leaderboard", description="‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ XP ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å", color=discord.Color.gold())
    for i, (user_id, user_data) in enumerate(sorted_users[:10]):
        try:
            member = interaction.guild.get_member(int(user_id))
            member_name = member.display_name if member else f"Unknown User"
        except:
            member_name = f"Left User"
        embed.add_field(name=f"#{i+1}. {member_name}", value=f"**Level:** {user_data['level']} | **XP:** {user_data['xp']}", inline=False)
    await interaction.followup.send(embed=embed)

# --- 5.5 ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà!) ---
@bot.tree.command(name="‡πÄ‡∏™‡∏Å‡πÄ‡∏ß‡∏•", description=" ‡∏°‡∏≠‡∏ö XP ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
@app_commands.checks.has_permissions(administrator=True) # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
async def givexp(interaction: discord.Interaction, member: discord.Member, amount: int):
    sync = await bot.tree.sync()
    data = load_data()
    user_id = str(member.id)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if user_id not in data:
        data[user_id] = {"xp": 0, "level": 1, "last_message_time": "2000-01-01T00:00:00.000000"}
        
    data[user_id]["xp"] += amount
    save_data(data)
    
    # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ephemeral=True ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÄ‡∏£‡∏≤)
    await interaction.response.send_message(f"‚úÖ ‡∏°‡∏≠‡∏ö XP ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **{amount}** ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {member.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    await check_level_up(user_id, interaction.guild)

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
@givexp.error
async def givexp_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!", ephemeral=True)

        server_on()

bot.run(os.getenv('TOKEN'))
