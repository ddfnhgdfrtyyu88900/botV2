import os
import discord
from discord.ext import commands
import json
import os
import random
import asyncio
from datetime import datetime, timedelta

from myserver import server_on

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents) 

# --- 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏° ---
PVP_DATA_FILE = "pvp_data.json"
CONFIG_FILE = "config.json"

GAME_SETTINGS = {
    "fight_cooldown_seconds": 300,  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    "points_on_win": 50,
    "points_on_loss": 10,
    "upgrade_cost_multiplier": 1.5,
    "professions": {
        "swordsman": {
            "display_name": "‡∏ô‡∏±‡∏Å‡∏î‡∏≤‡∏ö ‚öîÔ∏è",
            "base_stats": {"hp": 120, "atk": 10, "def": 8}
        },
        "mage": {
            "display_name": "‡∏ô‡∏±‡∏Å‡πÄ‡∏ß‡∏ó üßô",
            "base_stats": {"hp": 80, "atk": 15, "def": 5}
        }
    }
}

# --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def load_data(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

def generate_showcase_embeds():
    embeds = []
    for prof_key, prof_data in GAME_SETTINGS["professions"].items():
        embed = discord.Embed(
            title=prof_data["display_name"],
            description=f"‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏ä‡∏µ‡∏û {prof_data['display_name']}",
            color=discord.Color.random()
        )
        base_stats = prof_data["base_stats"]
        embed.add_field(
            name="‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
            value=f"‚ù§Ô∏è HP: {base_stats['hp']} | ‚öîÔ∏è ATK: {base_stats['atk']} | üõ°Ô∏è DEF: {base_stats['def']}",
            inline=False
        )
        embed.add_field(
            name="‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô",
            value=f"‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `!upgrade`",
            inline=False
        )
        embeds.append(embed)
    return embeds

# --- 4. Event ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ---
@bot.event
async def on_ready():
    print(f'{bot.user} ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß! (Prefix: !)')

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    await bot.process_commands(message)

# --- 5. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ---

@bot.command(name="choose", help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß!) | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !choose <swordsman/mage>")
async def choose(ctx, profession: str):
    user_id = str(ctx.author.id)
    data = load_data(PVP_DATA_FILE)
    
    profession = profession.lower()

    if user_id in data and "profession" in data[user_id]:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ!")
        return

    if profession not in GAME_SETTINGS["professions"]:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ô‡∏µ‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 'swordsman' ‡∏´‡∏£‡∏∑‡∏≠ 'mage'")
        return
        
    base_stats = GAME_SETTINGS["professions"][profession]["base_stats"]
    data[user_id] = {
        "profession": profession, "points": 100,
        "hp": base_stats["hp"], "atk": base_stats["atk"], "def": base_stats["def"],
        "last_fight_time": "2000-01-01T00:00:00.000000"
    }
    save_data(data, PVP_DATA_FILE)
    
    prof_display_name = GAME_SETTINGS["professions"][profession]["display_name"]
    await ctx.send(f"üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ {ctx.author.mention}! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏´‡πà‡∏á **{prof_display_name}** ‡πÅ‡∏•‡πâ‡∏ß!")

@bot.command(name="profile", help="‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !profile [@mention]")
async def profile(ctx, member: discord.Member = None):
    target_user = member or ctx.author
    user_id = str(target_user.id)
    data = load_data(PVP_DATA_FILE)

    if user_id not in data or "profession" not in data[user_id]:
        await ctx.send(f"{target_user.display_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û! ‡πÉ‡∏ä‡πâ `!choose` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
        return
        
    user_data = data[user_id]
    prof = user_data["profession"]
    
    embed = discord.Embed(title=f"Profile ‡∏Ç‡∏≠‡∏á {target_user.display_name}", color=discord.Color.dark_gold())
    embed.set_thumbnail(url=target_user.display_avatar.url)
    embed.add_field(name="‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", value=GAME_SETTINGS["professions"][prof]["display_name"], inline=False)
    embed.add_field(name="üí∞ Points", value=f"**{user_data['points']}**", inline=True)
    embed.add_field(name="‚ù§Ô∏è HP", value=f"**{user_data['hp']}**", inline=True)
    embed.add_field(name="‚öîÔ∏è ATK", value=f"**{user_data['atk']}**", inline=True)
    embed.add_field(name="üõ°Ô∏è DEF", value=f"**{user_data['def']}**", inline=True)
        
    await ctx.send(embed=embed)

@bot.command(name="upgrade", help="‡πÉ‡∏ä‡πâ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !upgrade <hp/atk/def>")
async def upgrade(ctx, stat: str):
    user_id = str(ctx.author.id)
    data = load_data(PVP_DATA_FILE)
    stat = stat.lower()

    if user_id not in data or "profession" not in data[user_id]:
        await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û! ‡πÉ‡∏ä‡πâ `!choose` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô")
        return
        
    if stat not in ["hp", "atk", "def"]:
        await ctx.send("‚ùå ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: `hp`, `atk`, ‡∏´‡∏£‡∏∑‡∏≠ `def`")
        return

    user_data = data[user_id]
    cost = int(user_data[stat] * GAME_SETTINGS["upgrade_cost_multiplier"])
    
    if user_data["points"] < cost:
        await ctx.send(f"‚ùå ‡∏û‡∏≠‡∏¢‡∏ï‡πå‡πÑ‡∏°‡πà‡∏û‡∏≠! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ **{cost}** Points ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {user_data['points']} Points)")
        return

    data[user_id]["points"] -= cost
    if stat == "hp": data[user_id]["hp"] += 10
    else: data[user_id][stat] += 1
    
    save_data(data, PVP_DATA_FILE)
    await ctx.send(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡πà‡∏≤ **{stat.upper()}** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

@bot.command(name="fight", help="‡∏ó‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô! | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !fight <@mention>")
async def fight(ctx, opponent: discord.Member):
    attacker_id = str(ctx.author.id)
    defender_id = str(opponent.id)
    data = load_data(PVP_DATA_FILE)

    if attacker_id == defender_id: await ctx.send("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ!"); return
    if opponent.bot: await ctx.send("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ!"); return
    if attacker_id not in data or defender_id not in data: await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏ä‡∏µ‡∏û!"); return

    now = datetime.utcnow()
    last_fight_time = datetime.fromisoformat(data[attacker_id]["last_fight_time"])
    cooldown = timedelta(seconds=GAME_SETTINGS["fight_cooldown_seconds"])
    if now < last_fight_time + cooldown:
        remaining = (last_fight_time + cooldown) - now
        await ctx.send(f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏≠‡∏¢‡∏π‡πà! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {int(remaining.total_seconds())} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"); return

    attacker_stats = data[attacker_id].copy()
    defender_stats = data[defender_id].copy()
    
    embed = discord.Embed(title=f"‚öîÔ∏è {ctx.author.display_name} VS {opponent.display_name} üõ°Ô∏è", color=discord.Color.red())
    fight_message = await ctx.send(embed=embed)
    
    battle_log = ""
    winner = None

    for i in range(1, 6):
        battle_log += f"\n**--- Round {i} ---**\n"
        
        # Attacker's turn
        damage = max(1, attacker_stats["atk"] - defender_stats["def"])
        defender_stats["hp"] -= damage
        battle_log += f"{ctx.author.display_name} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ {opponent.display_name} ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ **{damage}**! (HP ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {defender_stats['hp']})\n"
        if defender_stats["hp"] <= 0: winner = ctx.author; break
            
        # Defender's turn
        damage = max(1, defender_stats["atk"] - attacker_stats["def"])
        attacker_stats["hp"] -= damage
        battle_log += f"{opponent.display_name} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Å‡∏•‡∏±‡∏ö ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ **{damage}**! (HP ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {attacker_stats['hp']})\n"
        if attacker_stats["hp"] <= 0: winner = opponent; break

        embed.description = battle_log
        await fight_message.edit(embed=embed)
        await asyncio.sleep(2)

    if winner:
        winner_id = str(winner.id)
        loser_id = defender_id if winner_id == attacker_id else attacker_id
        
        data[winner_id]["points"] += GAME_SETTINGS["points_on_win"]
        data[loser_id]["points"] = max(0, data[loser_id]["points"] - GAME_SETTINGS["points_on_loss"])
        
        battle_log += f"\n**üèÜ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏∑‡∏≠ {winner.mention}!**\n‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö **{GAME_SETTINGS['points_on_win']}** Points"
    else:
        battle_log += "\n**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ: ‡πÄ‡∏™‡∏°‡∏≠!**"

    data[attacker_id]["last_fight_time"] = now.isoformat()
    save_data(data, PVP_DATA_FILE)

    embed.description = battle_log
    await fight_message.edit(embed=embed)

# --- 6. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå ---
@bot.group(name="showcase", invoke_without_command=True)
@commands.has_permissions(administrator=True)
async def showcase(ctx):
    await ctx.send("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `!showcase set` ‡∏´‡∏£‡∏∑‡∏≠ `!showcase update`")

@showcase.command(name="set", help="[Admin] ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
@commands.has_permissions(administrator=True)
async def showcase_set(ctx):
    config = load_data(CONFIG_FILE)
    embeds = generate_showcase_embeds()
    
    message_ids = []
    for embed in embeds:
        msg = await ctx.send(embed=embed)
        message_ids.append(msg.id)
        
    config["showcase_channel_id"] = ctx.channel.id
    config["showcase_message_ids"] = message_ids
    save_data(config, CONFIG_FILE)
    
    await ctx.send(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", delete_after=10)
    await ctx.message.delete()

@showcase.command(name="update", help="[Admin] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏≠‡∏≤‡∏ä‡∏µ‡∏û")
@commands.has_permissions(administrator=True)
async def showcase_update(ctx):
    config = load_data(CONFIG_FILE)
    if not config.get("showcase_channel_id"):
        await ctx.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `!showcase set` ‡∏Å‡πà‡∏≠‡∏ô")
        return

    try:
        channel = await bot.fetch_channel(config["showcase_channel_id"])
        new_embeds = generate_showcase_embeds()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô embed ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if len(config["showcase_message_ids"]) != len(new_embeds):
             await ctx.send("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `!showcase set` ‡πÉ‡∏´‡∏°‡πà")
             return

        for msg_id, new_embed in zip(config["showcase_message_ids"], new_embeds):
            message = await channel.fetch_message(msg_id)
            await message.edit(embed=new_embed)
            
        await ctx.send("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", delete_after=10)
    except discord.NotFound:
        await ctx.send("‚ùå ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏π‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠! ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ `!showcase set` ‡πÉ‡∏´‡∏°‡πà")
    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    await ctx.message.delete()

    server_on()

bot.run(os.getenv('TOKEN'))
